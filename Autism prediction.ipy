!pip install catboost
!pip install lightgbm
!pip install imbalanced-learn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier
from imblearn.pipeline import Pipeline
from imblearn.combine import SMOTEENN

df = pd.read_csv('train.csv')

print(df.info())
print(df.describe().T)

df = df.replace({'?': np.nan})
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = df[col].fillna(df[col].mode()[0])
    else:
        df[col] = df[col].fillna(df[col].median())


def convert_age(age):
    if age < 4:
        return 'Toddler'
    elif age < 12:
        return 'Kid'
    elif age < 18:
        return 'Teenager'
    elif age < 40:
        return 'Young Adult'
    else:
        return 'Adult'

df['ageGroup'] = df['age'].apply(convert_age)
df['sum_score'] = df.loc[:, 'A1_Score':'A10_Score'].sum(axis=1)

le = LabelEncoder()
for col in df.select_dtypes(include=['object']):
    df[col] = le.fit_transform(df[col])


X = df.drop(['ID', 'Class/ASD'], axis=1)
y = df['Class/ASD']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the pipeline
pipeline = Pipeline([
    ('smoteenn', SMOTEENN(random_state=42)),
    ('scaler', StandardScaler()),
    ('classifier', RandomForestClassifier(random_state=42))
])


models = {
    'RandomForest': (RandomForestClassifier(random_state=42), 
                     {'classifier__n_estimators': [100, 200, 300],
                      'classifier__max_depth': [None, 5, 10]}),
    'LightGBM': (LGBMClassifier(random_state=42),
                 {'classifier__n_estimators': [100, 200, 300],
                  'classifier__max_depth': [-1, 5, 10]}),
    'CatBoost': (CatBoostClassifier(random_state=42, verbose=0),
                 {'classifier__iterations': [100, 200, 300],
                  'classifier__depth': [4, 6, 8]})
}


for name, (model, param_grid) in models.items():
    pipeline.set_params(classifier=model)
    grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='roc_auc')
    grid_search.fit(X_train, y_train)
    
    y_pred = grid_search.predict(X_test)
    
    print(f"\n{name} Results:")
    print(f"Best parameters: {grid_search.best_params_}")
    print(f"ROC AUC Score: {roc_auc_score(y_test, y_pred):.4f}")
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

best_model = grid_search.best_estimator_
feature_importance = best_model.named_steps['classifier'].feature_importances_
feature_names = X.columns

plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importance, y=feature_names, orient='h')
plt.title('Feature Importance')
plt.tight_layout()
plt.show()
